
//  Created by Евгений Никитин on 12.05.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

final class DeinitializationSet {
	static func getQuestions() -> [Question] {
		return [
			Question(question: [
                "Какое ключевое слово обозначает деинициализацию?",
                "Этим ключевым словом обозначается деинициализация",
                "Деинициализация обозначается этим ключевым словом"
            ],
					 image: "",
					 optionA: "deinit",
					 optionB: "init",
					 optionC: "deinitialization",
					 optionD: "",
					 id: 976027024,
					 helpText: "deinit. Деинициализатор вызывается перед освобождением экземпляра класса. Вы пишите деинициализаторы с ключевого слова deinit, аналогично как вы пишите инициализаторы с ключевого слова init."),

			Question(question: [
                "Для каких типов доступны деинициализаторы?",
                "Деинициализаторы доступны только для этих типов",
                "Каким типам доступны деинициализаторы?"
            ],
					 image: "",
					 optionA: "Классовые типы",
					 optionB: "Структурные типы",
					 optionC: "Типы перечислений",
					 optionD: "Все перечисленные",
					 id: 326086144,
					 helpText: "Классовые типы. Деинициализаторы доступны только для классовых типов."),

			Question(question: [
                "Сколько деинициализаторов могут иметь классовые типы?",
                "Определения класса могут иметь столько деинициализаторов"
            ],
					 image: "",
					 optionA: "Один",
					 optionB: "Два",
					 optionC: "Три",
					 optionD: "Сколько потребуется",
					 id: 352428798,
					 helpText: "Один. Определения класса могут иметь максимум один деинициализатор на один класс."),

			Question(question: [
                "Нужны ли круглые скобки деинициализатору?",
                "Деинициализатор может принимать параметры, так ли это?",
                "Деинициализатору нужны круглые скобки, так ли это?"
            ],
					 image: "",
					 optionA: "Нет",
					 optionB: "Да",
					 optionC: "",
					 optionD: "",
					 id: 347449025,
					 helpText: "Нет. Деинициализатор не принимает ни одного параметра и пишется без круглых скобок."),

			Question(question: [
                "Деинициализатор вызывается автоматически после того, как освобождается экземпляр?",
                "Сразу после освобождения экземпляра вызывается деинициализатор, так ли это?"
            ],
					 image: "",
					 optionA: "Нет",
					 optionB: "Да",
					 optionC: "",
					 optionD: "",
					 id: 893668063,
					 helpText: "Нет. Деинициализаторы вызываются автоматически прямо перед тем как освобождается экземпляр."),

			Question(question: [
                "Можете ли вы самостоятельно вызывать деинициализатор?",
                "Вы можете самостоятельно вызывать деинициализатор, так ли это?"
            ],
					 image: "",
					 optionA: "Нет",
					 optionB: "Да",
					 optionC: "",
					 optionD: "",
					 id: 103456905,
					 helpText: "Нет. У вас нет возможности вызывать деинициализатор самостоятельно."),

			Question(question: [
                "Деинициализаторы суперклассов наследуются подклассами?",
                "Подклассы наследуют деинициализаторы суперклассов, так ли это?",
                "Вызывается ли деинициализатор суперкласса, если у подкласса нет своих деинициализаторов?"
            ],
					 image: "",
					 optionA: "Да",
					 optionB: "Нет",
					 optionC: "",
					 optionD: "",
					 id: 649284586,
					 helpText: "Да. Деинициализаторы суперкласса наследуются их подклассами, и деинициализаторы суперкласса вызываются автоматически в конце реализации деинициализатора подкласса. Деинициализаторы суперклассов всегда вызываются, даже если подкласс не имеет своего деинициализатора."),

			Question(question: [
                "Имеет ли деинициализатор доступ к свойствам экземпляра?",
                "Может ли деинициализатор изменить свое поведение, основываясь на свойствах экземпляра?",
                "Деинициализатор имеет доступ ко всем свойствам экземпляра, так ли это?"
            ],
					 image: "",
					 optionA: "Да",
					 optionB: "Нет",
					 optionC: "",
					 optionD: "",
					 id: 753879101,
					 helpText: "Да. Так как экземпляр не освобождается до тех пор пока не будет вызван деинициализатор, то деинициалиатор может получить доступ ко всем свойствам экземпляра, который он вызывает, и может изменить свое поведение, основываясь на этих свойствах(например, имя файла, который должен быть закрыт).")
		]
	}
}
