
//  Created by Евгений Никитин on 15.04.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

final class TheBasicsSet {
    static func getQuestions() -> [Question] {
        return [
            Question(question: ["Команда, выполняющая одну или несколько операций",
                                "Как называется завершенная команда языка Swift?",
                                "В Swift завершенная команда называется именно так",
                                "Как называется завершенная команда, которая может состоять из множества операторов и операндов?"],
                     image: "",
                     optionA: "Выражение",
                     optionB: "Переменная",
                     optionC: "Предложение",
                     optionD: "",
                     id: 119763965,
                     helpText: """
                     Выражение. Завершенная команда в языке Swift называется выражением. Swift, как и любой другой язык программирования, выполняет свои функции с помощью команд, которые отдает (пишет) разработчик.
                     
                     Файл с кодом обычно состоит из совокупности выражений, написанных на множестве строк.
                     """),
            
            Question(question: ["Минимальная функциональная единица, выполняющая определенную операцию",
                                "Независимая функциональная единица (символ, слово или группа слов), выполняющая определенную операцию"],
                     image: "",
                     optionA: "Оператор",
                     optionB: "Операнд",
                     optionC: "Выражение",
                     optionD: "",
                     id: 120674603,
                     helpText: """
                     Оператор. Оператор — это минимальная независимая функциональная единица (символ, слово или группа слов), выполняющая определенную операцию.
                     
                     Это одно из основных понятий, с которым вам предстоит встречаться в ходе обучения разработке на Swift. Благодаря операторам мы можем работать с данными.
                     
                     В будущем, в процессе создания приложений, вы будете регулярно применять различные операторы, а также при необходимости создавать собственные.
                     """),
            
            Question(question: ["Набор символов, зарезервированный языком программирования?",
                                "Зарезервированные языком программирования наборы символов, которые не могут быть использованы в качестве идентификаторов"],
                     image: "",
                     optionA: "Ключевое слово",
                     optionB: "Функция",
                     optionC: "Замыкание",
                     optionD: "Идентификатор",
                     id: 138747951,
                     helpText: """
                     Ключевое слово. Ключевые слова зарезервированы и не могут быть использованы в качестве идентификаторов, если не помещены в одиночные кавычки.
                     
                     Ключевые слова, кроме inout, var,  и let, могут быть использованы в качестве внешних имен параметров в объявлении функции или в вызове функции без необходимости помещать их в одиночные кавычки.
                     """),
            
            Question(question: ["С какой буквы рекомендуется писать имена переменных или констант в Swift?",
                                "В Свифт рекомендуется писать имя переменной, константы или функции именно с этой буквы",
                                "С какой буквы, согласно хорошей практики, должно начинаться имя переменной в Swift?"],
                     image: "",
                     optionA: "Со строчной (маленькой)",
                     optionB: "С заглавной (большой)",
                     optionC: "По желанию",
                     optionD: "",
                     id: 105538073,
                     helpText: """
                     Со строчной (маленькой). Хорошей практикой является использование названий свойств и методов в CamelCase.
                     
                     То есть названия начинаются со строчной буквы (Lower Camel Case). Если название состоит из нескольких слов, то только первое начинается со строчной буквы.
                     
                     Названия типов рекомендуется писать с заглавной буквы (Upper Camel Case).
                     """),
            
            Question(question: ["Все типы в Swift пишутся с ...",
                                "С какой буквы надо писать все типы в Свифт?",
                                "Именно с этой буквы пишутся все типы в Swift"],
                     image: "",
                     optionA: "Заглавной буквы (большой)",
                     optionB: "На наше усмотрение",
                     optionC: "Строчной буквы (маленькой)",
                     optionD: "",
                     id: 413429091,
                     helpText: "Заглавной буквы (большой). Все типы в Swift пишутся с заглавной буквы, просто запомните это."),
            
            Question(question: ["Как называется создание нового объекта, с которым планируется взаимодействие?",
                                "Создание нового объекта, с которым планируется взаимодействие"],
                     image: "",
                     optionA: "Объявление",
                     optionB: "Модифицикация",
                     optionC: "Инициализация",
                     optionD: "",
                     id: 262622283,
                     helpText: "Объявление. Объявление - это создание нового объекта с которым планируется взаимодействие. Инициализация - присвоение объявленному объекту определенного значения."),
            
            Question(question: ["Обязана ли константа или переменная иметь имя?" ],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "Только константа",
                     optionD: "",
                     id: 703851560,
                     helpText: "Да. Любое хранилище, неважно, какого вида обязано иметь имя, по которому можно проинициализировать новое или получить записанное ранее значение."),
            
            Question(question: ["Именованный участок в памяти, в котором хранится некоторое значение",
                                "Как называется именованный участок в памяти, в котором хранится некоторое значение?",
                                "Поименованная, либо адресуемая иным способом область памяти, адрес которой можно использовать для осуществления доступа к данным"],
                     image: "",
                     optionA: "Переменная или константа",
                     optionB: "Структура",
                     optionC: "Строка",
                     optionD: "Библиотека",
                     id: 869118628,
                     helpText: "Переменная или константа. Для хранения данных в Swift, как и в других языках программирования, используются переменные и константы. Переменная или константа представляет собой именованный участок в памяти, в котором хранится некоторое значение."),
            
            Question(question: ["Как называется объявление переменной или константы с присваиванием ей значения?",
                                "Объявление переменной с присваиванием ей значения",
                                "Присвоение объявленному объекту начального значения"],
                     image: "",
                     optionA: "Инициализация",
                     optionB: "Возведение",
                     optionC: "Объявление",
                     optionD: "",
                     id: 348516913,
                     helpText: """
                     Инициализация. Инициализация - это подготовительный процесс экземпляра класса, структуры или перечисления для дальнейшего использования.
                     
                     Этот процесс включает в себя установку начальных значений для каждого свойства хранения этого экземпляра и проведение любых настроек или инициализации, которые нужны до того, как экземпляр будет использоваться.
                     """),
            
            Question(question: ["Именованный участок памяти, значение которого можно установить только один раз и нельзя изменить в дальнейшем (в Swift)",
                                "Значение этого именованного участка памяти можно установить только один раз, без возможности менять его в дальнейшем (в Swift)" ],
                     image: "",
                     optionA: "Константа",
                     optionB: "Постоянная",
                     optionC: "Лямбда",
                     optionD: "",
                     id: 563776915,
                     helpText: """
                     Константа. Константы подобны переменным, они также хранят некоторое значение, за тем исключением, что определяются с помощью ключевого слова let, и мы не можем после их инициализации изменить их значение.
                     
                     Таким образом, если значение некоторой переменной в течении программы меняться не будет, то вместо этой переменной лучше использовать константу.
                     """),
            
            Question(question: ["Ключевое слово, которое используется для определения константы",
                                "Какое ключевое слово используется для определения константы?",
                                "Этим ключевым словом можно определить константу"],
                     image: "",
                     optionA: "let",
                     optionB: "set",
                     optionC: "var",
                     optionD: "",
                     id: 741624371,
                     helpText: """
                     let. Константы подобны переменным, они также хранят некоторое значение, за тем исключением, что определяются с помощью ключевого слова let, и мы не можем после их инициализации изменить их значение.
                     
                     Таким образом, если значение некоторой переменной в течении программы меняться не будет, то вместо этой переменной лучше использовать константу.
                     """),
            
            Question(question: ["В каком случае данные в константе могут перезаписываться?",
                                "Исключение, при котором данные в константе могут перезаписываться"],
                     image: "",
                     optionA: "Внутри цикла",
                     optionB: "Только во ViewDidLoad()",
                     optionC: "Внутри функции",
                     optionD: "",
                     id: 971844998,
                     helpText: "Внутри цикла. Исключением является использование в цикле, где константа каждую итерацию будет перезаписываться."),
            
            Question(question: ["Какое ключевое слово используется для определения переменной?",
                                "Ключевое слово, которое используется для определения переменной",
                                "Этим ключевым словом можно определить переменную"],
                     image: "",
                     optionA: "var",
                     optionB: "let",
                     optionC: "func",
                     optionD: "set",
                     id: 298488075,
                     helpText: "var. Для определения переменной используется ключевое слово var. Отличительной особенностью переменных является то, что мы можем изменять их значение многократно во время работы программы"),
            
            Question(question: ["Какими должны быть имена переменных?",
                                "Какими должны быть имена констант или переменных?",
                                "Мы должны придумывать именно такими имена переменных или констант"],
                     image: "",
                     optionA: "Уникальными",
                     optionB: "Универсальными",
                     optionC: "Односложными",
                     optionD: "",
                     id: 111227749,
                     helpText: """
                     Уникальными. Переменные и константы должны иметь уникальные имена. Нельзя использовать в программе несколько переменных и (или) констант с одними и теми же именами.
                     
                     Причем хорошей практикой является использование названий в так называемом верблюжьем регистре или CamelCase. То есть названия начинаются со строчной буквы.
                     
                     Если название состоит из нескольких слов, то только первое из них начинается со строчной буквы.
                     """),
            
            Question(question: ["Должны ли вы употреблять var и let каждый раз, когда обращаетесь к созданной переменной или константе?",
                                "Каждый раз обращаясь к переменной или константе вы обязаны указывать операторы var или let. Так ли это?"],
                     image: "",
                     optionA: "Нет",
                     optionB: "Да",
                     optionC: "Только let",
                     optionD: "",
                     id: 155391199,
                     helpText: "Нет. Операторы var и let необходимо задействовать только при объявлении параметра. В дальнейшем при обращении к объявленным переменным и константам требуется использовать только их имена."),
            
            Question(question: ["Множество возможных значений и операций с этими значениями, которые мы присваиваем объекту?"],
                     image: "",
                     optionA: "Тип данных",
                     optionB: "Имя",
                     optionC: "Аргументы",
                     optionD: "",
                     id: 597074158,
                     helpText: """
                     Тип данных. Тип данных — это множество возможных значений и операций с этими значениями. Тип данных определяет не только характеристики объекта, но и то, что с ними можно делать.
                     
                     В Swift типы данных определяют: значения, которые хранятся в параметрах:
                     - целые числа, дробные числа, строки и отдельные символы, логические значения или другой вид информации;
                     - а так же операции, которые с этими значениями можно произвести: числа складывать или вычитать, строки объединять между собой и т. д.
                     """),
            
            Question(question: ["Каждая переменная или константа имеет тип данных. Так ли это?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "Только если тип указан явно",
                     optionD: "",
                     id: 695176009,
                     helpText: """
                     Да. Любое хранилище, неважно, какого вида, имеет тип данных, определяющий множество значений, которые могут храниться в этом хранилище (целые числа, строки и т. д.).
                     
                     Явное указание типа при этом необязательно, если вы не указали тип, он будет присвоен автоматически из контекста (из проинициализированного значения).
                     """),
            
            Question(question: ["Как можно объявлять тип данных?",
                                "В Swift можно объявить тип данных несколькими способами, как?",
                                "Именно так в Swift можно объявлять тип данных у константы или переменной"],
                     image: "",
                     optionA: "Явно или Неявно",
                     optionB: "Неявно",
                     optionC: "Явно",
                     optionD: "",
                     id: 833048164,
                     helpText: "Явно или Неявно. Явно, указывая тип данных при объявлении переменной, через двоеточие. Либо неявно, инициализируя значение в переменной или константе (из которого XCode поймет, какой тип данных присвоить этому значению)."),
            
            Question(question: ["Можете ли вы создать переменную с именем, уже занятым другой переменной (в одной \"области видимости\")?",
                                "Можем ли мы присвоить константе имя, занятое другой константой, находящейся в той же \"области видимости\"?"],
                     image: "",
                     optionA: "Нет",
                     optionB: "Да",
                     optionC: "",
                     optionD: "",
                     id: 851417725,
                     helpText: """
                     Нет. Имена должны быть уникальными. Нельзя создавать переменную или константу с именем, уже занятым другой переменной или константой.
                     
                     Единственным исключением является ситуация, когда эти переменные и константы находятся в разных областях видимости.
                     
                     Например: вы можете назвать локальную переменную (внутри функции) так же, как называли глобальную переменную. Пока области их видимости не пересекаются, конфликта не будет.
                     """),
            
            Question(question: ["Возможно ли объявить нескольких констант в одну строку?",
                                "Можем ли мы объявить сразу две переменные в одну строку?",
                                "Возможно ли объявление двух и более переменных или констант в одну строку?"],
                     image: "",
                     optionA: "Да, через запятую",
                     optionB: "Да, через обратный слеш",
                     optionC: "Нет, каждая с новой строки",
                     optionD: "Да, через двоеточие",
                     id: 450568571,
                     helpText: "Да, через запятую. Мы можем определить сразу несколько переменных и констант на одной строке. В этом случае они должны разделяться запятой."),
            
            Question(question: ["Разрешит ли Swift инициализировать две переменные таким образом?"],
                     image: "TheBasics04",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     id: 495770020,
                     helpText: "Да. При объявлении нескольких переменных или констант вы можете использовать один оператор — var или let и через запятую попарно указать их имена и инициализируемые значения."),
            
            Question(question: ["Можем ли мы менять значение переменной?",
                                "Изменяется ли значение, присвоенное переменной?",
                                "Возможно ли поменять значение, присвоенное переменной?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "Да, но только внутри цикла",
                     optionD: "",
                     id: 376397074,
                     helpText: "Да. Отличительной особенностью переменных является то, что мы можем изменять их значение многократно во время работы программы."),
            
            Question(question: ["Если мы точно уверены, что значение переменной меняться не будет, что нам нужно использовать?",
                                "Если мы уверены, что значение переменной не будет меняться, что нам нужно объявить вместо нее?"],
                     image: "",
                     optionA: "Константу",
                     optionB: "Переменную",
                     optionC: "Литерал",
                     optionD: "Структуру",
                     id: 139322793,
                     helpText: """
                     Константу. Кроме переменных для хранения данных в программе могут использоваться константы.
                     
                     Константы подобны переменным, они также хранят некоторое значение, за тем исключением, что определяются с помощью ключевого слова let и мы не можем после их инициализации изменить их значение.
                     
                     Если хранимое значение в вашем коде не будет меняться, всегда объявляйте его как константу. Используйте переменные только для хранения значений, которые должны будут меняться.
                     """),
            
            Question(question: ["Как оформляется справочный комментарий?"],
                     image: "",
                     optionA: "/** Комментарий */",
                     optionB: "// Комментарий",
                     optionC: "/// Комментарий",
                     optionD: "// MARK: Комментарий",
                     id: 673221814,
                     helpText: """
                     /** Комментарий */. Помимо стандартный комментариев, которые вы могли видеть в любом языке программирования, Swift позволяет интегрировать комментарии в справочную систему.
                     
                     Такой вид комментариев необходим, когда вы разрабатываете библиотеку функций. Оформляются они следующим образом: /** Комментарий */.
                     
                     После написания справочного комментария к функции, вы можете с зажатой клавишей Alt нажать на ее имя, чтобы получить справку.
                     """),
            
            Question(question: ["Что мы получим, при попытке запустить этот код?"],
                     image: "TheBasics37",
                     optionA: "Столкнемся с ошибкой",
                     optionB: "Ничего не произойдет",
                     optionC: "Переменной присваивается число",
                     optionD: "Переменная обнуляется",
                     id: 977906170,
                     helpText: """
                     Столкнемся с ошибкой. Swift является типобезопасным языком со строгой типизацией, поэтому после того, как мы присвоили переменной тип, мы не можем его изменить. Так, в этом случае мы столкнемся с ошибкой.
                     
                     Ошибка возникает, так как переменная name ожидает строковый литерал, а число с плавающей точкой не является строкой и не соответствует переменной name по типу.
                     """),
            
            Question(question: ["Являются ли все базовые типы (Int, String, Double, Bool) в Swift хешируемыми?",
                                "Все базовые типы (Int, String, Double, Bool) в Swift являются хешируемыми, так ли это?",],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "Все, кроме Bool",
                     optionD: "Все, кроме String",
                     id: 337032018,
                     helpText: """
                     Да. Все базовые типы Swift (Int, String, Double, Bool) являются хешируемыми типами по умолчанию и могут быть использованы в качестве типов значений множества или в качестве типов ключей словаря.
                     
                     Значения членов перечисления без каких-либо связанных значений так же являются хешируемыми по умолчанию.
                     """),
            
            Question(question: ["Что позволяет создавать и передавать группы значений, и возвращать несколько значений из функции?",
                                "С помощью этого можно вернуть несколько значений из функции как одно целое значение",
                                "С помощью чего мы можем создавать и передавать группы значений в Swift?"],
                     image: "",
                     optionA: "Кортеж",
                     optionB: "Опционал",
                     optionC: "Множество",
                     optionD: "Переменная",
                     id: 973627421,
                     helpText: "Кортеж. В дополнение к знакомым типам, Swift включает расширенные типы, которых нет в Objective-C. К ним относятся кортежи, которые позволяют создавать и передавать группы значений. Кортежи могут возвращать несколько значений из функции как одно целое значение."),
            
            Question(question: ["Тип, позволяющий работать с отсутствующими значениями",
                                "Какой тип позволяет работать с отсутствующими значениями?",
                                "С отсутствующими значениями можно работать с помощью этого типа"],
                     image: "",
                     optionA: "Опциональный тип",
                     optionB: "Тип кортежа",
                     optionC: "Тип коллекции",
                     optionD: "",
                     id: 678354331,
                     helpText: """
                     Опциональный тип. Swift также включает опциональные типы, которые позволяют работать с отсутствующими значениями.
                     
                     Опциональные значения говорят либо «здесь есть значение, и оно равно х», либо «здесь нет значения вообще».
                     
                     Опциональные типы подобны использованию nil с указателями в Objective-C, но они работают со всеми типами, не только с классами. Опциональные значения безопаснее и выразительнее чем nil указатели в Objective-C, и находятся в сердце многих наиболее мощных особенностей Swift.
                     """),
            
            Question(question: ["Что не могут содержать имена констант и переменных?",
                                "Это нельзя использовать при написании имен констант и переменных",
                                "Выберите, что не могут содержать имена переменных и констант?"],
                     image: "",
                     optionA: "Пробелы и стрелки",
                     optionB: "Unicode-символы",
                     optionC: "Нижнее подчеркивание",
                     optionD: "",
                     id: 602301579,
                     helpText: """
                     Пробелы и стрелки. Имена констант и переменных не могут содержать пробелы, математические символы, стрелки, приватные (или невалидные) кодовые точки Unicode, а так жетакже символы отрисовки линий или прямоугольников.
                     
                     Так имена не могут начинаться с цифр, хотя цифры могут быть включены в имя в любом другом месте.
                     """),
            
            Question(question: ["Можем ли мы после объявления константы, дальше по коду изменить ее на переменную?",
                                "После объявление переменной, дальше по коду, можем ли мы поменять ее на константу?",
                                "Можем ли мы менять константы на переменные, а переменные - на константы?"],
                     image: "",
                     optionA: "Нет",
                     optionB: "Да",
                     optionC: "",
                     optionD: "",
                     id: 437768301,
                     helpText: "Нет. Если вы объявили константу или переменную определенного типа, то вы не можете объявить ее заново с тем же именем или заставить хранить внутри себя значение другого типа. Также вы не можете изменить константу на переменную, а переменную - на константу."),
            
            Question(question: ["Какая глобальная функция может вывести одно или более значений в консоль?",
                                "Глобальная функция, которая используется для выведения значений в консоль",
                                "Функция, являющаяся глобальной, и позволяющая выводить одно или более значений в консоль?"],
                     image: "",
                     optionA: "print(_:separator:terminator:)",
                     optionB: "show()",
                     optionC: "alert()",
                     optionD: "Console.WriteLine",
                     id: 982616398,
                     helpText: """
                     print(_:separator:terminator:). Эта функция является глобальной, которая выводит одно или более значений в подходящем виде.
                     
                     В Xcode, например, функция print(_:separator:terminator:) выводит значения в консоль. Параметры separator и terminator имеют дефолтные значения, так что при использовании функции их можно просто пропустить.
                     
                     По умолчанию функция заканчивает вывод символом переноса строки. Чтобы вывести в консоль значения без переноса на новую строку, вам нужно указать пустую строку в параметре terminator.
                     """),
            
            Question(question: ["Скомпилируется ли данный код?"],
                     image: "TheBasics09",
                     optionA: "Нет",
                     optionB: "Да",
                     optionC: "",
                     optionD: "",
                     id: 275158535,
                     helpText: "Нет. Данный код не будет компилироваться, поскольку мы обращаемся к несуществующей переменной greetings. Получим ошибку \"Cannot find greetings in scope\" - что означает, что xcode не может найти данную переменную в этой области видимости."),
            
            Question(question: ["Как называется игнорируемый компилятором, неисполняемый текст в коде?",
                                "Как называется неисполняемый текст в коде?",
                                "Что нужно добавить, чтобы у вас появился неисполняемый участок кода?"],
                     image: "",
                     optionA: "Комментарий",
                     optionB: "Исключение",
                     optionC: "Примечание",
                     optionD: "",
                     id: 618260897,
                     helpText: """
                     Комментарий. Используйте комментарии, чтобы добавить неисполняемый текст в коде,  как примечание или напоминание самому себе.
                     
                     Комментарии игнорируются компилятором Swift во время компиляции кода. Комментарии в Swift очень похожи на комментарии в C.
                     
                     Однострочные комментарии начинаются с двух слешей (//), многострочные комментарии начинаются со слеша и звездочки (/*) и заканчиваются звездочкой, за которой следует слеш (*/). Внутри многострочного комментария вы можете поместить любой участок кода, который хотите сделать неисполняемым.
                     """),
            
            Question(question: ["Один случай, когда в Swift необходимо ставить точку с запятой (;) в коде?",
                                "В каком случае вам необходимо будет поставить точку с запятой (;) в коде?",
                                "В этом случае вам нужно ставить точку с запятой в коде"],
                     image: "",
                     optionA: "Несколько выражений на строке",
                     optionB: "Внутри замыканий",
                     optionC: "После каждого выражения",
                     optionD: "",
                     id: 147229591,
                     helpText: """
                     Несколько выражений на строке. В отличие от многих других языков, Swift не требует писать точку с запятой (;) после каждого выражения в коде, хотя вы можете делать это, если хотите.
                     
                     Однако точки с запятой требуются, если вы хотите написать несколько отдельных выражений на одной строке. Пример: let name = SomeValue; print(name).
                     """),
            
            Question(question: ["Как мы можем изменить имя существующего типа на более подходящее по контексту?",
                                "Как вы можете изменить имя существующего типа на подходящее по контексту?",
                                "Каким образом можно задать альтернативное имя для существующего типа?"],
                     image: "",
                     optionA: "Создать typealias",
                     optionB: "Создать копию типа",
                     optionC: "Создать контекстное имя",
                     optionD: "Это невозможно",
                     id: 815489411,
                     helpText: """
                     Создать typealias. Псевдонимы типов задают альтернативное имя для существующего типа. Можно задать псевдоним типа с помощью ключевого слова typealias.
                     
                     Псевдонимы типов полезны, когда вы хотите обратиться к существующему типу по имени, которое больше подходит по контексту.
                     
                     После того как вы один раз задали псевдоним типа, вы можете использовать псевдоним везде, где вы хотели бы его использовать.
                     """),
            
            Question(question: ["Объекты, доступные в любой точке программы?"],
                     image: "",
                     optionA: "Глобальные объекты",
                     optionB: "Локальные объекты",
                     optionC: "",
                     optionD: "",
                     id: 512795795,
                     helpText: """
                     Глобальные объекты. Каждый созданный объект может использоваться только по определенным правилам, одно из которых называется областью видимости.
                     
                     Область видимости определяет, где именно в коде можно использовать тот или иной объект. По принадлежности к области видимости объекты делятся на локальные и глобальные.
                     """),
            
            Question(question: ["Как называется возможность сослаться на свойство динамически, а не напрямую?"],
                     image: "TheBasics67",
                     optionA: "KeyPath",
                     optionB: "NamePath",
                     optionC: "PropertyURL",
                     optionD: "",
                     id: 446656031,
                     helpText: """
                     KeyPath. Одной из полезных особенностей Objective-C была возможность сослаться на свойство динамически, а не напрямую.
                     
                     Другими словами, вы могли указать объект и его свойство, которое необходимо использовать, но при этом не производить чтение или запись данного свойства сейчас, а сделать это позже.
                     
                     После создания структуры и константы, использующей эту структуру, вы можете использовать символ обратного слеша перед указанием параметра для создания динамический ссылки. В константу name записывается ссылка на значение свойства name из Starship.
                     """),
            
            Question(question: ["В каком варианте указана валидная инициализация коллекции?"],
                     image: "Collections10",
                     optionA: "Вариант №1",
                     optionB: "Вариант №2",
                     optionC: "В обоих вариантах",
                     optionD: "",
                     id: 918072994,
                     helpText: "Вариант №1. Правильная инициализация указана в варианте №1, во втором - при указании типа \"Массив\" мы не уточняем в угловых скобках, какой тип будет использоваться. Правильной инициализацией считалась бы запись var array = Array<String>()."),
            
            Question(question: ["Ключевое слово для подключения модуля к контроллеру",
                                "Каким ключевым словом можно подключить модули в контроллере?"],
                     image: "",
                     optionA: "import",
                     optionB: "add",
                     optionC: "func",
                     optionD: "invite",
                     id: 757078826,
                     helpText: "import."),
            
            Question(question: [
                "Можем ли мы, как и в других языках программирования, использовать операторы декремента (--) и инкремента (++) в Swift?",
                "Можем ли мы использовать постфиксные операторы инкремента (++) и декремента (--) в Swift?"
            ],
                     image: "",
                     optionA: "Нет",
                     optionB: "Да",
                     optionC: "Иногда",
                     optionD: "",
                     id: 603921109,
                     helpText: "Нет. В Swift отсутствуют довольно популярные в других языках операторы инкремента (++) и декремента (--), увеличивающие и уменьшающие значение на единицу соответственно."),
            
            Question(question: ["В каком из этих вариантов объявляется новая переменная?"],
                     image: "TheBasics08",
                     optionA: "Вариант №2",
                     optionB: "Вариант №1",
                     optionC: "Ни в каком",
                     optionD: "",
                     id: 326135577,
                     helpText: "Вариант №2. Новая переменная объявляется во втором варианте, для создания новой - мы всегда используем ключевое слово var. Если ключевое слово не используется - то мы изменяем уже существующую переменную (если она есть)."),
            
            Question(question: ["Специальный механизм, позволяющий преобразовывать одни типы данных в другие?"],
                     image: "",
                     optionA: "Приведение",
                     optionB: "Преобразование",
                     optionC: "Подчинение",
                     optionD: "",
                     id: 612079213,
                     helpText: """
                     Приведение. Специальный механизм, позволяющий преобразовывать одни типы данных в другие, называется \"приведением\" (от слова «привести»), выполнен он в виде множества глобальных функций.
                     
                     Int(_:) — преобразовывает переданное значение к типу данных Int.
                     Double(_:) — преобразовывает переданное значение к типу данных Double.
                     Float(_:) — преобразовывает переданное значение к типу данных Float.
                     
                     Для применения данных функций в скобках после названия требуется передать преобразуемый элемент (переменную, константу, число).
                     """),
            
            Question(question: ["Какой из стандартных типов данных не является сопоставимым (Comparable)?"],
                     image: "",
                     optionA: "Bool",
                     optionB: "Int",
                     optionC: "Double",
                     optionD: "Character",
                     id: 154693833,
                     helpText: """
                     Bool. Сопоставимым (Comparable) называется тип данных, значения которого могут быть сопоставлены между собой с помощью операторов логического сравнения <, <=, >= и >.
                     
                     Другими словами, значения этого типа можно сравнить между собой, чтобы узнать, какое из них больше, а какое меньше. Определить, является ли тип данных сопоставимым, очень просто. Достаточно сравнить два значения этого типа с помощью логических операторов.
                     
                     Если в результате этого выражения будет возвращено true или false, то такой тип называется сопоставимым. Все строковые и числовые типы являются сопоставимыми, а вот Bool не позволяет сравнивать свои значения (логично, что true не может быть больше или меньше false).
                     """),
            
            Question(question: ["У каждого отдельного значения в составе этого объекта может быть собственный тип данных, который никак не зависит от других",
                                "Особый объект, который группирует значения различных типов в пределах одного составного значения",
                                "Объект, предлагающий наиболее простой способ объединения значений различных типов в пределах одного значения"],
                     image: "",
                     optionA: "Кортеж",
                     optionB: "Массив",
                     optionC: "Коллекция",
                     optionD: "",
                     id: 788894031,
                     helpText: """
                     Кортеж. Кортеж - это особый объект, который группирует значения различных типов в пределах одного составного значения.
                     
                     Более того, кортеж предлагает наиболее простой способ объединения значений различных типов в пределах одного значения.
                     
                     У каждого отдельного значения в составе кортежа может быть собственный тип данных, который никак не зависит от других.
                     """),
            
            Question(question: ["Набор элементов, выстроенных в очередь, в котором есть возможность осуществлять последовательный (поочередный) доступ к ним"],
                     image: "",
                     optionA: "Последовательность",
                     optionB: "Очередь",
                     optionC: "Класс",
                     optionD: "Константа",
                     id: 339661765,
                     helpText: """
                     Последовательность. Последовательность (Sequence) — набор элементов, выстроенных в очередь, в котором есть возможность осуществлять последовательный (поочередный) доступ к ним.
                     
                     При этом не предусмотрен механизм, позволяющий обратиться к какому-либо определенному элементу напрямую. Вы можете лишь последовательно перебирать элементы.
                     
                     Sequence — это протокол, определяющий требования, при которых значение типа данных может называться последовательностью. Протокол Sequence требует, чтобы тип обеспечивал хранение множества однотипных значений и организовывал доступ к ним с помощью последовательного перебора.
                     """),
            
            Question(question: ["Выберите корректное обозначение типа (аннотацию) для переменной, чтобы обозначить, что переменная может хранить String:"],
                     image: "",
                     optionA: "var welcomeMessage: String",
                     optionB: "let welcome: Bool",
                     optionC: "var message: Character",
                     optionD: "",
                     id: 576669906,
                     helpText: """
                     var welcomeMessage: String. Вы можете добавить обозначение типа, когда объявляете константу или переменную, чтобы иметь четкое представление о типах значений, которые могут хранить константы или переменные.
                     
                     Написать обозначение типа, можно поместив двоеточие после имени константы или переменной, затем пробел, за которым следует название используемого типа.
                     
                     Наш пример добавляет обозначение типа для переменной с именем welcomeMessage, чтобы обозначить, что переменная может хранить String.
                     """),
            
            Question(question: ["В каком из вариантов объявляется новая константа?"],
                     image: "TheBasics09",
                     optionA: "Вариант №1",
                     optionB: "Вариант №2",
                     optionC: "Ни в каком",
                     optionD: "",
                     id: 595374301,
                     helpText: """
                     Вариант №1. Объявление новой константы всегда происходит с использованием ключевого слова let.
                     
                     Все последующие обращения к этой константе происходит уже без ключевого слова. Как вы можете помнить или знать - изменять константу нельзя, поэтому этот случай мы не рассматриваем.
                     """),
            
            Question(question: ["var red, green, blue: Double. Можем ли подобным образом создавать несколько переменных с явным объявлением одного и того же типа для всех?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     id: 672345681,
                     helpText: """
                     Да. Вы можете создать несколько переменных одного типа в одной строке, разделенной запятыми, с одной аннотацией типа после последнего имени переменной.
                     
                     Редко когда вам понадобится обозначать тип на практике. Когда вы даете начальное значение константе или переменной на момент объявления, Swift всегда может вывести тип, который будет использовать в константе или переменной.
                     """),
            
            Question(question: ["Получим ли мы значение в консоль, если да, то какое?"],
                     image: "TheBasics05",
                     optionA: "40",
                     optionB: "nil",
                     optionC: "Нет, столкнемся с ошибкой",
                     optionD: "",
                     id: 165259541,
                     helpText: """
                     40. Инициализацию значения любых параметров (переменных и констант) можно проводить, указывая в правой части выражения не только конкретное значение, но и имя другого параметра, это называется \"Инициализация копированием\".
                     
                     Переменная num2 имеет значение 40, что соответствует значению константы num1. Таким образом вы создаете копию исходного значения, то есть в результате операции будут объявлены переменные с двумя независимыми значениями.
                     
                     Изменение одного из них не повлияет на другое. Тип данных параметра, который обеспечивает передачу значения копированием, называется value type (значимый тип, или тип-значение).
                     """),
            
            Question(question: ["Какой тип используется, когда значение может отсутствовать?",
                                "Если значение может отсутствовать, какой тип мы будем использовать?",
                                "Этот тип используется, если значение может отсутствовать"],
                     image: "",
                     optionA: "Опциональный",
                     optionB: "Логический Bool",
                     optionC: "Кортеж",
                     optionD: "Неявный тип",
                     id: 689016638,
                     helpText: "Опциональный. Опциональные типы используются в тех случаях, когда значение может отсутствовать. Опциональный тип подразумевает, что возможны два варианта: или значение есть, и его можно извлечь из опционала, либо его вообще нет."),
        ]
    }
}



